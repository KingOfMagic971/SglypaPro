# -*- coding: utf-8 -*-
# meta developer: @Rezoxss
# scope: hikka_only

from .. import loader, utils
import logging
import random
import re
import asyncio
from collections import defaultdict

logger = logging.getLogger(__name__)

@loader.tds
class SmartSglypaMod(loader.Module):
    """–£–º–Ω—ã–π –º–æ–¥—É–ª—å —Å–≥–ª—ã–ø—ã —Å –ø—Å–µ–≤–¥–æ-–Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    strings = {
        "name": "SmartSglypa",
        "on": "‚úÖ –£–º–Ω—ã–π —Ä–µ–∂–∏–º —Å–≥–ª—ã–ø—ã –≤–∫–ª—é—á–µ–Ω! AI –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
        "off": "‚ùå –†–µ–∂–∏–º —Å–≥–ª—ã–ø—ã –≤—ã–∫–ª—é—á–µ–Ω",
        "already_on": "‚ö†Ô∏è –†–µ–∂–∏–º —É–∂–µ –≤–∫–ª—é—á–µ–Ω",
        "already_off": "‚ö†Ô∏è –†–µ–∂–∏–º —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "reply_chance",
                40,
                "–®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ –≤ %",
                validator=loader.validators.Integer(minimum=1, maximum=100)
            ),
            loader.ConfigValue(
                "ai_intelligence",
                80,
                "–£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ AI",
                validator=loader.validators.Integer(minimum=1, maximum=100)
            )
        )
        self.active_chats = set()
        self.chat_history = defaultdict(list)
        self.markov_chains = defaultdict(dict)

    async def client_ready(self, client, db):
        self._client = client

    def add_to_history(self, chat_id, text):
        """–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç—Ä–æ–∏–º –º–∞—Ä–∫–æ–≤—Å–∫—É—é —Ü–µ–ø—å"""
        if text and len(text) > 2:
            words = re.findall(r'\b[–∞-—è—ë]{2,}\b', text.lower())
            for word in words:
                if word not in ['—ç—Ç–æ', '–≤–æ—Ç', '–∫–∞–∫', '—á—Ç–æ', '—Ç–∞–º', '–∑–¥–µ—Å—å']:
                    self.chat_history[chat_id].append(word)
            
            # –°—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç—É—é –º–∞—Ä–∫–æ–≤—Å–∫—É—é —Ü–µ–ø—å –¥–ª—è AI
            if len(words) > 1:
                for i in range(len(words) - 1):
                    current_word = words[i]
                    next_word = words[i + 1]
                    if current_word not in self.markov_chains[chat_id]:
                        self.markov_chains[chat_id][current_word] = []
                    self.markov_chains[chat_id][current_word].append(next_word)

    def generate_ai_sglypa(self, chat_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≥–ª—ã–ø—É —Å –ø—Å–µ–≤–¥–æ-AI –ª–æ–≥–∏–∫–æ–π"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Ä–∫–æ–≤—Å–∫—É—é —Ü–µ–ø—å –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if (chat_id in self.markov_chains and self.markov_chains[chat_id] and 
            random.randint(1, 100) <= self.config["ai_intelligence"]):
            
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–ª–æ–≤–æ
                current_word = random.choice(list(self.markov_chains[chat_id].keys()))
                result = [current_word]
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É —Å–ª–æ–≤
                for _ in range(random.randint(2, 6)):
                    if (current_word in self.markov_chains[chat_id] and 
                        self.markov_chains[chat_id][current_word]):
                        next_word = random.choice(self.markov_chains[chat_id][current_word])
                        result.append(next_word)
                        current_word = next_word
                    else:
                        break
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
                prefixes = [
                    "AI: ", "–ù–µ–π—Ä–æ—Å–µ—Ç—å: ", "–ì–ü–¢: ", "–ú–æ–∑–≥: ", "ü§ñ ", "üß† ",
                    "–í–æ—Ç —á—Ç–æ —è –¥—É–º–∞—é: ", "–ú–æ–π –∞–Ω–∞–ª–∏–∑: ", "–ì–µ–Ω–µ—Ä–∏—Ä—É—é: "
                ]
                
                return random.choice(prefixes) + " ".join(result).capitalize()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ AI: {e}")
                return self.generate_fallback_sglypa(chat_id)
        else:
            return self.generate_fallback_sglypa(chat_id)

    def generate_fallback_sglypa(self, chat_id):
        """–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≥–ª—ã–ø—ã"""
        patterns = [
            "{} {} {}", "{} {} {} {}", "{} {} {} {} {}", 
            "{} {} {} {} {} {}", "{} {} {} {} {} {} {}",
            "–±–ª—è–¥—å {} {}", "–Ω–∞—Ö—É–π {} {}", "–ø–∏–∑–¥–µ—Ü {} {}", "—ë–±–∞–Ω—ã–π {} {}",
            "–∑–∞–µ–±–∏—Å—å {} {}", "–æ—Ç—ä–µ–±–∏—Å—å {} {}", "–µ–±–∞—Ç—å {} {}", "—Ö—É—è—Ä–∏—Ç—å {} {}",
            "–∞ –≤–æ—Ç –∏ {} {}", "–∏ —Ç—É—Ç {} {}", "–≤–Ω–µ–∑–∞–ø–Ω–æ {} {}", "–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ {} {}",
            "–∫–∞–∫ –∂–µ {} {}", "–æ—Ö —É–∂ —ç—Ç–∞ {} {}", "—á—Ç–æ –∑–∞ {} {}", "—ç—Ç–∞ {} {}",
            "–º–æ—è {} {}", "—Ç–≤–æ—è {} {}", "–Ω–∞—à–∞ {} {}", "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ {} {}",
            "–∫–∞–∂–µ—Ç—Å—è {} {}", "–Ω–∞–≤–µ—Ä–Ω–æ–µ {} {}", "–≤–æ–∑–º–æ–∂–Ω–æ {} {}", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ {} {}"
        ]
        
        if chat_id in self.chat_history and self.chat_history[chat_id]:
            words = list(self.chat_history[chat_id])
        else:
            words = ["—Å–≥–ª—ã–ø–∞", "–ø–∏–¥–æ—Ä", "–∂–æ–ø–∞", "—Ö—É–π", "–ø–∏–∑–¥–∞", "–µ–±–ª–∞–Ω", "–º—É–¥–∞–∫"]
        
        pattern = random.choice(patterns)
        num_slots = pattern.count("{}")
        
        result = pattern
        for _ in range(num_slots):
            if words:
                word = random.choice(words)
                result = result.replace("{}", word, 1)
            else:
                result = result.replace("{}", "—Å–≥–ª—ã–ø–∞", 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º AI –º–µ—Ç–∫—É –µ—Å–ª–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤—ã—Å–æ–∫–∏–π
        if random.randint(1, 100) <= self.config["ai_intelligence"]:
            ai_tags = ["[AI]", "[GPT]", "[–ù–µ–π—Ä–æ—Å–µ—Ç—å]", "[–ú–æ–∑–≥]", "ü§ñ", "üß†"]
            result = f"{random.choice(ai_tags)} {result}"
        
        return result.capitalize()

    @loader.command()
    async def sglypa(self, message):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≥–ª—ã–ø—É - .sglypa [on/off/status/clear]"""
        args = utils.get_args_raw(message)
        chat_id = utils.get_chat_id(message)
        
        if message.text:
            self.add_to_history(chat_id, message.text)

        if not args:
            sglypa_text = self.generate_ai_sglypa(chat_id)
            await utils.answer(message, sglypa_text)
            return
            
        if args.lower() == "on":
            if chat_id in self.active_chats:
                await utils.answer(message, self.strings("already_on"))
            else:
                self.active_chats.add(chat_id)
                await utils.answer(message, self.strings("on"))
                
        elif args.lower() == "off":
            if chat_id not in self.active_chats:
                await utils.answer(message, self.strings("already_off"))
            else:
                self.active_chats.discard(chat_id)
                await utils.answer(message, self.strings("off"))
                
        elif args.lower() == "status":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç—É
            chat_words = len(self.chat_history.get(chat_id, []))
            chat_chains = len(self.markov_chains.get(chat_id, {}))
            active_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if chat_id in self.active_chats else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
            
            status_text = (
                f"üìä –°—Ç–∞—Ç—É—Å —Å–≥–ª—ã–ø—ã:\n"
                f"{active_status}\n"
                f"üó£Ô∏è –°–ª–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {chat_words}\n"
                f"üß† AI —Ü–µ–ø–æ—á–µ–∫: {chat_chains}\n"
                f"üéØ –®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞: {self.config['reply_chance']}%\n"
                f"ü§ñ –£–º–Ω–æ—Å—Ç—å AI: {self.config['ai_intelligence']}%"
            )
            await utils.answer(message, status_text)
            return
                
        elif args.lower() == "clear":
            if chat_id in self.chat_history:
                self.chat_history[chat_id].clear()
                self.markov_chains[chat_id].clear()
            await utils.answer(message, "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∏ AI –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            return
                
        else:
            sglypa_text = self.generate_ai_sglypa(chat_id)
            await utils.answer(message, sglypa_text)

    @loader.watcher()
    async def watcher(self, message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å AI –æ—Ç–≤–µ—Ç–∞–º–∏"""
        chat_id = utils.get_chat_id(message)
        
        if chat_id not in self.active_chats:
            return
            
        if not message.text or message.out or message.text.startswith('.'):
            return
            
        self.add_to_history(chat_id, message.text)
        
        # –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–ª–æ–≤–æ "—Å–≥–ª—ã–ø–∞"
        if re.search(r'—Å–≥–ª—ã–ø–∞', message.text, re.IGNORECASE):
            sglypa_text = self.generate_ai_sglypa(chat_id)
            await message.reply(sglypa_text)
            return
            
        # –û–±—ã—á–Ω—ã–π —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞
        if random.randint(1, 100) <= self.config["reply_chance"]:
            sglypa_text = self.generate_ai_sglypa(chat_id)
            await message.reply(sglypa_text)

    async def on_unload(self):
        self.active_chats.clear()
        self.chat_history.clear()
        self.markov_chains.clear()