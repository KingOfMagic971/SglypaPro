# -*- coding: utf-8 -*-
# meta developer: @Rezoxss
# scope: hikka_only

from .. import loader, utils
import logging
import random
import re
import asyncio
import time
from collections import defaultdict

logger = logging.getLogger(__name__)

@loader.tds
class SmartSglypaMod(loader.Module):
    """–£–º–Ω—ã–π –º–æ–¥—É–ª—å —Å–≥–ª—ã–ø—ã —Å ChatGPT –ª–æ–≥–∏–∫–æ–π"""
    
    strings = {
        "name": "SmartSglypa",
        "on": "‚úÖ –†–µ–∂–∏–º —Å–≥–ª—ã–ø—ã –≤–∫–ª—é—á–µ–Ω! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Å–≥–ª—ã–ø–∞–º–∏",
        "off": "‚ùå –†–µ–∂–∏–º —Å–≥–ª—ã–ø—ã –≤—ã–∫–ª—é—á–µ–Ω",
        "already_on": "‚ö†Ô∏è –†–µ–∂–∏–º —Å–≥–ª—ã–ø—ã —É–∂–µ –≤–∫–ª—é—á–µ–Ω",
        "already_off": "‚ö†Ô∏è –†–µ–∂–∏–º —Å–≥–ª—ã–ø—ã —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω",
        "cleared": "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞",
        "stats": "üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {}"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "reply_chance",
                40,
                "–®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ –≤ % (40%)",
                validator=loader.validators.Integer(minimum=1, maximum=100)
            ),
            loader.ConfigValue(
                "use_ai",
                True,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
                validator=loader.validators.Boolean()
            )
        )
        self.active = False
        self.chat_history = defaultdict(list)  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
        self.words_db = self.load_words_database()

    def load_words_database(self):
        """–ë–∞–∑–∞ —Å–ª–æ–≤ –¥–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        return {
            "nouns": [
                "–∫–æ—à–∫–∞", "—Å–æ–±–∞–∫–∞", "–ø—Ç–∏—Ü–∞", "—Ä—ã–±–∞", "–º—ã—à—å", "—Ö–æ–º—è–∫", "–∫—Ä–æ–ª–∏–∫", 
                "—á–µ—Ä–µ–ø–∞—Ö–∞", "–ª—è–≥—É—à–∫–∞", "–±–µ–≥–µ–º–æ—Ç", "–Ω–æ—Å–æ—Ä–æ–≥", "—Å–ª–æ–Ω", "–∂–∏—Ä–∞—Ñ",
                "—Ç–∏–≥—Ä", "–ª–µ–≤", "–≤–æ–ª–∫", "–ª–∏—Å–∞", "–º–µ–¥–≤–µ–¥—å", "–µ–Ω–æ—Ç", "–±–æ–±–µ—Ä",
                "–ø–æ–º–∏–¥–æ—Ä", "–æ–≥—É—Ä–µ—Ü", "–∫–∞—Ä—Ç–æ—à–∫–∞", "–º–æ—Ä–∫–æ–≤–∫–∞", "–∫–∞–ø—É—Å—Ç–∞", "—è–±–ª–æ–∫–æ",
                "–≥—Ä—É—à–∞", "–∞–ø–µ–ª—å—Å–∏–Ω", "–±–∞–Ω–∞–Ω", "–∫–ª—É–±–Ω–∏–∫–∞", "–º–∞–ª–∏–Ω–∞", "–≤–∏—à–Ω—è",
                "–ø–∏—Ü—Ü–∞", "–±—É—Ä–≥–µ—Ä", "—Å—É–ø", "—Å–∞–ª–∞—Ç", "–º–æ—Ä–æ–∂–µ–Ω–æ–µ", "—à–æ–∫–æ–ª–∞–¥",
                "—Å—Ç–æ–ª", "—Å—Ç—É–ª", "–∫—Ä–æ–≤–∞—Ç—å", "—à–∫–∞—Ñ", "–ø–æ–ª–∫–∞", "–ª–∞–º–ø–∞", "–æ–∫–Ω–æ",
                "–¥–≤–µ—Ä—å", "–∫–æ–º–ø—å—é—Ç–µ—Ä", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–∫–Ω–∏–≥–∞", "—Ç–µ—Ç—Ä–∞–¥—å", "—Ä—É—á–∫–∞",
                "—á–µ–ª–æ–≤–µ–∫", "–¥—Ä—É–≥", "–±—Ä–∞—Ç", "—Å–µ—Å—Ç—Ä–∞", "–º–∞–º–∞", "–ø–∞–ø–∞", "–¥–µ–¥",
                "–≥–æ–ª–æ–≤–∞", "—Ä—É–∫–∞", "–Ω–æ–≥–∞", "—Å–ø–∏–Ω–∞", "–∂–∏–≤–æ—Ç", "–Ω–æ—Å", "—É—Ö–æ"
            ],
            "adjectives": [
                "–∫—Ä–∞—Å–Ω—ã–π", "—Å–∏–Ω–∏–π", "–∑–µ–ª–µ–Ω—ã–π", "–∂–µ–ª—Ç—ã–π", "–æ—Ä–∞–Ω–∂–µ–≤—ã–π", "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π",
                "—Ä–æ–∑–æ–≤—ã–π", "–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π", "—á–µ—Ä–Ω—ã–π", "–±–µ–ª—ã–π", "—Å–µ—Ä—ã–π", "–≥–æ–ª—É–±–æ–π",
                "–±–æ–ª—å—à–æ–π", "–º–∞–ª–µ–Ω—å–∫–∏–π", "–æ–≥—Ä–æ–º–Ω—ã–π", "–∫—Ä–æ—à–µ—á–Ω—ã–π", "–≤—ã—Å–æ–∫–∏–π", "–Ω–∏–∑–∫–∏–π",
                "—Ç–æ–ª—Å—Ç—ã–π", "—Ç–æ–Ω–∫–∏–π", "–ø—É—à–∏—Å—Ç—ã–π", "–≥–ª–∞–¥–∫–∏–π", "—à–µ—Ä—à–∞–≤—ã–π", "–º–æ–∫—Ä—ã–π",
                "—Å—É—Ö–æ–π", "–≥–æ—Ä—è—á–∏–π", "—Ö–æ–ª–æ–¥–Ω—ã–π", "—Ç–µ–ø–ª—ã–π", "–ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π", "—Å–≤–µ–∂–∏–π",
                "—Å—Ç–∞—Ä—ã–π", "–Ω–æ–≤—ã–π", "–º–æ–ª–æ–¥–æ–π", "–¥—Ä–µ–≤–Ω–∏–π", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "–±—ã—Å—Ç—Ä—ã–π",
                "–º–µ–¥–ª–µ–Ω–Ω—ã–π", "—É–º–Ω—ã–π", "–≥–ª—É–ø—ã–π", "–≤–µ—Å–µ–ª—ã–π", "–≥—Ä—É—Å—Ç–Ω—ã–π", "–∑–ª–æ–π",
                "—Å–º–µ—à–Ω–æ–π", "—Å–µ—Ä—å–µ–∑–Ω—ã–π", "–≤–∞–∂–Ω—ã–π", "–Ω–µ–æ–±—ã—á–Ω—ã–π", "—Å—Ç—Ä–∞–Ω–Ω—ã–π", "—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π"
            ],
            "verbs": [
                "–±–µ–∂–∏—Ç", "–ª–µ—Ç–∏—Ç", "–ø–ª—ã–≤–µ—Ç", "–ø–æ–ª–∑–µ—Ç", "–ø—Ä—ã–≥–∞–µ—Ç", "—Å–∫–∞—á–µ—Ç",
                "—Å–∏–¥–∏—Ç", "—Å—Ç–æ–∏—Ç", "–ª–µ–∂–∏—Ç", "–≤–∏—Å–∏—Ç", "—Ä–∞—Å—Ç–µ—Ç", "—Ü–≤–µ—Ç–µ—Ç",
                "–ø–∞–¥–∞–µ—Ç", "–ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è", "–≤—Ä–∞—â–∞–µ—Ç—Å—è", "–∫–∞—á–∞–µ—Ç—Å—è", "–±–ª–µ—Å—Ç–∏—Ç",
                "—à—É–º–∏—Ç", "–º–æ–ª—á–∏—Ç", "–ø–æ–µ—Ç", "–≥–æ–≤–æ—Ä–∏—Ç", "–∫—Ä–∏—á–∏—Ç", "—à–µ–ø—á–µ—Ç",
                "–µ—Å—Ç", "–ø—å–µ—Ç", "—Å–ø–∏—Ç", "–±–æ–¥—Ä—Å—Ç–≤—É–µ—Ç", "—Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ—Ç–¥—ã—Ö–∞–µ—Ç",
                "—Å–º–µ–µ—Ç—Å—è", "–ø–ª–∞—á–µ—Ç", "–¥—É–º–∞–µ—Ç", "–º–µ—á—Ç–∞–µ—Ç", "—Ö–æ—á–µ—Ç", "–º–æ–∂–µ—Ç",
                "–∏—Å—Å–ª–µ–¥—É–µ—Ç", "–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç", "—Å–æ–∑–¥–∞–µ—Ç", "—Ç–≤–æ—Ä–∏—Ç", "—Å—Ç—Ä–æ–∏—Ç", "–∏–≥—Ä–∞–µ—Ç"
            ]
        }

    async def client_ready(self, client, db):
        self._client = client

    def add_to_history(self, chat_id, text):
        """–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é"""
        if text and len(text) > 2:
            words = re.findall(r'\b[–∞-—è—ë]{3,}\b', text.lower())
            for word in words:
                if word not in ['—ç—Ç–æ', '–≤–æ—Ç', '–∫–∞–∫', '—á—Ç–æ', '—Ç–∞–º', '–∑–¥–µ—Å—å']:
                    self.chat_history[chat_id].append(word)

    def get_chat_words(self, chat_id, count=3):
        """–ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        if chat_id in self.chat_history and self.chat_history[chat_id]:
            history_words = list(self.chat_history[chat_id])
            if len(history_words) >= count:
                return random.sample(history_words, count)
            else:
                # –î–æ–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
                result = history_words.copy()
                while len(result) < count:
                    result.append(random.choice(self.words_db["nouns"]))
                return result
        return
