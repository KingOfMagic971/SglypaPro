# SglypaPro
–ú–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ —É –±–æ—Ç–∞ —Å–≥–ª—ã–ø–∞.
# -*- coding: utf-8 -*-
# meta developer: @Rezoxss
# scope: hikka_only

from .. import loader, utils
import logging
import random
import re
from collections import defaultdict

logger = logging.getLogger(__name__)

@loader.tds
class SglypaMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≥–ª—ã–ø –∫–∞–∫ —É @sglypa_tg_bot"""
    
    strings = {
        "name": "Sglypa",
        "on": "‚úÖ –†–µ–∂–∏–º —Å–≥–ª—ã–ø—ã –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Å–≥–ª—ã–ø–∞–º–∏",
        "off": "‚ùå –†–µ–∂–∏–º —Å–≥–ª—ã–ø—ã –≤—ã–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
        "already_on": "‚ö†Ô∏è –†–µ–∂–∏–º —Å–≥–ª—ã–ø—ã —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
        "already_off": "‚ö†Ô∏è –†–µ–∂–∏–º —Å–≥–ª—ã–ø—ã —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
        "cleared": "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞",
        "stats": "üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {}"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "reply_chance",
                40,
                "–®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ –≤ %",
                validator=loader.validators.Integer(minimum=1, maximum=100)
            )
        )
        self.active_chats = set()
        self.chat_history = defaultdict(list)
        self.words_db = self.load_words_database()

    def load_words_database(self):
        """–ë–∞–∑–∞ —Å–ª–æ–≤ –¥–ª—è —Å–≥–ª—ã–ø"""
        return {
            "nouns": [
                "–∫–æ—à–∫–∞", "—Å–æ–±–∞–∫–∞", "–ø—Ç–∏—Ü–∞", "—Ä—ã–±–∞", "–º—ã—à—å", "—Ö–æ–º—è–∫", "–∫—Ä–æ–ª–∏–∫", 
                "—á–µ—Ä–µ–ø–∞—Ö–∞", "–ª—è–≥—É—à–∫–∞", "–±–µ–≥–µ–º–æ—Ç", "–Ω–æ—Å–æ—Ä–æ–≥", "—Å–ª–æ–Ω", "–∂–∏—Ä–∞—Ñ",
                "—Ç–∏–≥—Ä", "–ª–µ–≤", "–≤–æ–ª–∫", "–ª–∏—Å–∞", "–º–µ–¥–≤–µ–¥—å", "–µ–Ω–æ—Ç", "–±–æ–±–µ—Ä",
                "–ø–æ–º–∏–¥–æ—Ä", "–æ–≥—É—Ä–µ—Ü", "–∫–∞—Ä—Ç–æ—à–∫–∞", "–º–æ—Ä–∫–æ–≤–∫–∞", "–∫–∞–ø—É—Å—Ç–∞", "—è–±–ª–æ–∫–æ",
                "–≥—Ä—É—à–∞", "–∞–ø–µ–ª—å—Å–∏–Ω", "–±–∞–Ω–∞–Ω", "–∫–ª—É–±–Ω–∏–∫–∞", "–º–∞–ª–∏–Ω–∞", "–≤–∏—à–Ω—è",
                "–ø–∏—Ü—Ü–∞", "–±—É—Ä–≥–µ—Ä", "—Å—É–ø", "—Å–∞–ª–∞—Ç", "–º–æ—Ä–æ–∂–µ–Ω–æ–µ", "—à–æ–∫–æ–ª–∞–¥",
                "—Å—Ç–æ–ª", "—Å—Ç—É–ª", "–∫—Ä–æ–≤–∞—Ç—å", "—à–∫–∞—Ñ", "–ø–æ–ª–∫–∞", "–ª–∞–º–ø–∞", "–æ–∫–Ω–æ",
                "–¥–≤–µ—Ä—å", "–∫–æ–º–ø—å—é—Ç–µ—Ä", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–∫–Ω–∏–≥–∞", "—Ç–µ—Ç—Ä–∞–¥—å", "—Ä—É—á–∫–∞",
                "—á–µ–ª–æ–≤–µ–∫", "–¥—Ä—É–≥", "–±—Ä–∞—Ç", "—Å–µ—Å—Ç—Ä–∞", "–º–∞–º–∞", "–ø–∞–ø–∞", "–¥–µ–¥",
                "–≥–æ–ª–æ–≤–∞", "—Ä—É–∫–∞", "–Ω–æ–≥–∞", "—Å–ø–∏–Ω–∞", "–∂–∏–≤–æ—Ç", "–Ω–æ—Å", "—É—Ö–æ",
                "—Ö—É–π", "–ø–∏–∑–¥–∞", "–µ–±–ª–∞–Ω", "–º—É–¥–∞–∫", "–ø–∏–¥–æ—Ä", "–±–ª—è–¥—å", "—Å—É–∫–∞",
                "–¥–æ–ª–±–æ—ë–±", "–∑–∞–ª—É–ø–∞", "–ø–∏–∑–¥–µ—Ü", "–∂–æ–ø–∞", "—Å—Ä–∞–∫–∞", "–æ—á–∫–æ"
            ],
            "adjectives": [
                "–∫—Ä–∞—Å–Ω—ã–π", "—Å–∏–Ω–∏–π", "–∑–µ–ª–µ–Ω—ã–π", "–∂–µ–ª—Ç—ã–π", "–æ—Ä–∞–Ω–∂–µ–≤—ã–π", "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π",
                "—Ä–æ–∑–æ–≤—ã–π", "–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π", "—á–µ—Ä–Ω—ã–π", "–±–µ–ª—ã–π", "—Å–µ—Ä—ã–π", "–≥–æ–ª—É–±–æ–π",
                "–±–æ–ª—å—à–æ–π", "–º–∞–ª–µ–Ω—å–∫–∏–π", "–æ–≥—Ä–æ–º–Ω—ã–π", "–∫—Ä–æ—à–µ—á–Ω—ã–π", "–≤—ã—Å–æ–∫–∏–π", "–Ω–∏–∑–∫–∏–π",
                "—Ç–æ–ª—Å—Ç—ã–π", "—Ç–æ–Ω–∫–∏–π", "–ø—É—à–∏—Å—Ç—ã–π", "–≥–ª–∞–¥–∫–∏–π", "—à–µ—Ä—à–∞–≤—ã–π", "m–æ–∫—Ä—ã–π",
                "—Å—É—Ö–æ–π", "–≥–æ—Ä—è—á–∏–π", "—Ö–æ–ª–æ–¥–Ω—ã–π", "—Ç–µ–ø–ª—ã–π", "–ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π", "—Å–≤–µ–∂–∏–π",
                "—Å—Ç–∞—Ä—ã–π", "–Ω–æ–≤—ã–π", "–º–æ–ª–æ–¥–æ–π", "–¥—Ä–µ–≤–Ω–∏–π", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "–±—ã—Å—Ç—Ä—ã–π",
                "–º–µ–¥–ª–µ–Ω–Ω—ã–π", "—É–º–Ω—ã–π", "–≥–ª—É–ø—ã–π", "–≤–µ—Å–µ–ª—ã–π", "–≥—Ä—É—Å—Ç–Ω—ã–π", "–∑–ª–æ–π",
                "—Å–º–µ—à–Ω–æ–π", "—Å–µ—Ä—å–µ–∑–Ω—ã–π", "–≤–∞–∂–Ω—ã–π", "–Ω–µ–æ–±—ã—á–Ω—ã–π", "—Å—Ç—Ä–∞–Ω–Ω—ã–π", "—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π",
                "—Ö—É—ë–≤—ã–π", "–ø–∏–∑–¥–∞—Ç—ã–π", "–µ–±–∞–Ω–Ω—ã–π", "–ø–∏–∑–¥–∞–Ω—É—Ç—ã–π", "–µ–±—É—á—ã–π", "–∑–∞–ª—É–ø–Ω—ã–π"
            ],
            "verbs": [
                "–±–µ–∂–∏—Ç", "–ª–µ—Ç–∏—Ç", "–ø–ª—ã–≤–µ—Ç", "–ø–æ–ª–∑–µ—Ç", "–ø—Ä—ã–≥–∞–µ—Ç", "—Å–∫–∞—á–µ—Ç",
                "—Å–∏–¥–∏—Ç", "—Å—Ç–æ–∏—Ç", "–ª–µ–∂–∏—Ç", "–≤–∏—Å–∏—Ç", "—Ä–∞—Å—Ç–µ—Ç", "—Ü–≤–µ—Ç–µ—Ç",
                "–ø–∞–¥–∞–µ—Ç", "–ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è", "–≤—Ä–∞—â–∞–µ—Ç—Å—è", "–∫–∞—á–∞–µ—Ç—Å—è", "–±–ª–µ—Å—Ç–∏—Ç",
                "—à—É–º–∏—Ç", "–º–æ–ª—á–∏—Ç", "–ø–æ–µ—Ç", "–≥–æ–≤–æ—Ä–∏—Ç", "–∫—Ä–∏—á–∏—Ç", "—à–µ–ø—á–µ—Ç",
                "–µ—Å—Ç", "–ø—å–µ—Ç", "—Å–ø–∏—Ç", "–±–æ–¥—Ä—Å—Ç–≤—É–µ—Ç", "—Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ—Ç–¥—ã—Ö–∞–µ—Ç",
                "—Å–º–µ–µ—Ç—Å—è", "–ø–ª–∞—á–µ—Ç", "–¥—É–º–∞–µ—Ç", "–º–µ—á—Ç–∞–µ—Ç", "—Ö–æ—á–µ—Ç", "–º–æ–∂–µ—Ç",
                "–∏—Å—Å–ª–µ–¥—É–µ—Ç", "–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç", "—Å–æ–∑–¥–∞–µ—Ç", "—Ç–≤–æ—Ä–∏—Ç", "—Å—Ç—Ä–æ–∏—Ç", "–∏–≥—Ä–∞–µ—Ç",
                "–µ–±—ë—Ç", "—Ç—Ä–∞—Ö–∞–µ—Ç", "–≤—ã–µ–±—ã–≤–∞–µ—Ç—Å—è", "–ø–∏–∑–¥–∏—Ç", "—Ö—É—è—Ä–∏—Ç", "–¥—Ä–æ—á–∏—Ç",
                "—Å–æ—Å—ë—Ç", "–ª–∏–∂–µ—Ç", "–≤—ã–µ–±–∞–ª", "–æ—Ç—ä–µ–±–∞–ª", "–∑–∞–µ–±–∞–ª", "–¥–æ–µ–±–∞–ª"
            ]
        }

    async def client_ready(self, client, db):
        self._client = client

    def add_to_history(self, chat_id, text):
        """–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if text and len(text) > 2:
            words = re.findall(r'\b[–∞-—è—ë]{3,}\b', text.lower())
            for word in words:
                if word not in ['—ç—Ç–æ', '–≤–æ—Ç', '–∫–∞–∫', '—á—Ç–æ', '—Ç–∞–º', '–∑–¥–µ—Å—å']:
                    self.chat_history[chat_id].append(word)

    def generate_sglypa(self, chat_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–≥–ª—ã–ø—É"""
        if chat_id in self.chat_history and self.chat_history[chat_id]:
            chat_words = list(self.chat_history[chat_id])
            noun = random.choice(chat_words)
        else:
            noun = random.choice(self.words_db["nouns"])
        
        adjective = random.choice(self.words_db["adjectives"])
        verb = random.choice(self.words_db["verbs"])

        patterns = [
            f"{adjective} {noun} {verb}",
            f"{noun} {verb} {adjective}",
            f"{verb} {adjective} {noun}",
            f"{adjective} {verb} {noun}",
            f"{noun} {adjective} {verb}",
            f"{verb} {noun} {adjective}"
        ]
        
        prefixes = [
            "–í–æ—Ç —ç—Ç–æ –¥–∞,", "–û–≥–æ,", "–í–∞—É,", "–£—Ö —Ç—ã,", "–ù–∏—á–µ–≥–æ —Å–µ–±–µ,",
            "–°–º–æ—Ç—Ä–∏—Ç–µ,", "–ö–∞–∂–µ—Ç—Å—è,", "–ù–∞–≤–µ—Ä–Ω–æ–µ,", "–í–æ–∑–º–æ–∂–Ω–æ,", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ,"
        ]
        
        return f"{random.choice(prefixes)} {random.choice(patterns)}"

    @loader.command()
    async def sglypa(self, message):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≥–ª—ã–ø—É –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º - .sglypa [on/off]"""
        args = utils.get_args_raw(message)
        chat_id = utils.get_chat_id(message)
        
        if message.text:
            self.add_to_history(chat_id, message.text)

        if not args:
            sglypa_text = self.generate_sglypa(chat_id)
            await utils.answer(message, sglypa_text)
            return
            
        if args.lower() == "on":
            if chat_id in self.active_chats:
                await utils.answer(message, self.strings("already_on"))
            else:
                self.active_chats.add(chat_id)
                await utils.answer(message, self.strings("on"))
                
        elif args.lower() == "off":
            if chat_id not in self.active_chats:
                await utils.answer(message, self.strings("already_off"))
            else:
                self.active_chats.discard(chat_id)
                await utils.answer(message, self.strings("off"))
                
        elif args.lower() == "clear":
            if chat_id in self.chat_history:
                self.chat_history[chat_id].clear()
            await utils.answer(message, self.strings("cleared"))
            
        elif args.lower() == "stats":
            count = len(self.chat_history.get(chat_id, []))
            await utils.answer(message, self.strings("stats").format(count))
            
        else:
            sglypa_text = self.generate_sglypa(chat_id)
            await utils.answer(message, sglypa_text)

    @loader.watcher()
    async def watcher(self, message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
        chat_id = utils.get_chat_id(message)
        
        # –†–∞–±–æ—Ç–∞–µ–º –¢–û–õ–¨–ö–û –≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö
        if chat_id not in self.active_chats:
            return
            
        if not message.text or message.out or message.text.startswith('.'):
            return
            
        self.add_to_history(chat_id, message.text)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ "—Å–≥–ª—ã–ø–∞" - –æ—Ç–≤–µ—á–∞–µ–º –≤—Å–µ–≥–¥–∞
        if re.search(r'—Å–≥–ª—ã–ø–∞', message.text, re.IGNORECASE):
            sglypa_text = self.generate_sglypa(chat_id)
            await message.reply(sglypa_text)
            return
            
        # –û–±—ã—á–Ω—ã–π —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ 40%
        if random.randint(1, 100) <= 40:
            sglypa_text = self.generate_sglypa(chat_id)
            await message.reply(sglypa_text)

    async def on_unload(self):
        self.active_chats.clear()
        self.chat_history.clear()
