# SglypaPro
Модуль предоставляет все функции как у бота сглыпа.
# -*- coding: utf-8 -*-
# meta developer: @Rezoxss
# scope: hikka_only

from .. import loader, utils
import logging
import random
import re
from collections import defaultdict

logger = logging.getLogger(__name__)

@loader.tds
class SglypaMod(loader.Module):
    """Модуль для генерации сглып как у @sglypa_tg_bot"""
    
    strings = {
        "name": "Sglypa",
        "on": "✅ Режим сглыпы включен в этом чате! Теперь я буду отвечать как сглыпа",
        "off": "❌ Режим сглыпы выключен в этом чате",
        "already_on": "⚠️ Режим сглыпы уже включен в этом чате",
        "already_off": "⚠️ Режим сглыпы уже выключен в этом чате",
    }

    def __init__(self):
        self.active_chats = set()
        self.chat_history = defaultdict(list)
        self.sglypa_patterns = self.load_sglypa_patterns()

    def load_sglypa_patterns(self):
        """Паттерны как у оригинальной сглыпы"""
        return [
            "{} {} {}", "{} {} {} {}", "{} {} {} {} {}", "{} {} {} {} {} {}",
            "а вот и {} {} {}", "и тут {} {} {}", "внезапно {} {} {}", 
            "неожиданно {} {} {}", "как же {} {} {}", "ох уж эта {} {} {}",
            "что за {} {} {}", "эта {} {} {}", "моя {} {} {}", "твоя {} {} {}",
            "наша {} {} {}", "{} {} {} прямо сейчас", "{} {} {} снова",
            "{} {} {} опять", "посмотрите {} {} {}", "кажется {} {} {}",
            "наверное {} {} {}", "возможно {} {} {}", "{} {} {} в чате",
            "{} {} {} здесь", "блядь {} {} {}", "ёбаный {} {} {}",
            "пиздец {} {} {}", "хуясе {} {} {}", "опа {} {} {}",
            "нахуй {} {} {}", "заебись {} {} {}", "отъебись {} {} {}",
            "ебать {} {} {}", "хуярить {} {} {}", "пиздеть {} {} {}",
            "дрочить {} {} {}", "сосать {} {} {}", "лизать {} {} {}",
            "{} {} {} {} блядь", "{} {} {} {} нахуй", "{} {} {} {} пиздец",
            "{} {} {} {} ебать", "{} {} {} {} заебись",
        ]

    async def client_ready(self, client, db):
        self._client = client

    def add_to_history(self, chat_id, text):
        """Добавляем все слова из сообщения в историю"""
        if text and len(text) > 2:
            words = re.findall(r'\b[а-яё]{2,}\b', text.lower())
            for word in words:
                if (word not in ['это', 'вот', 'как', 'что', 'там', 'здесь', 'тут', 'все', 'еще'] and 
                    not word.isdigit() and len(word) > 1):
                    self.chat_history[chat_id].append(word)

    def generate_true_sglypa(self, chat_id):
        """Генерируем настоящую сглыпу как у оригинала"""
        # Берем все слова из истории чата
        if chat_id in self.chat_history and self.chat_history[chat_id]:
            all_words = list(self.chat_history[chat_id])
        else:
            # Дефолтные слова если история пустая
            all_words = ["сглыпа", "пидор", "жопа", "хуй", "пизда", "еблан", "мудак", 
                        "гандон", "блядь", "сука", "член", "срака", "очко", "манда"]
        
        # Выбираем случайный паттерн
        pattern = random.choice(self.sglypa_patterns)
        num_slots = pattern.count("{}")
        
        # Заполняем паттерн словами из истории
        filled_pattern = pattern
        for _ in range(num_slots):
            if all_words:
                word = random.choice(all_words)
                # Иногда повторяем слова как в оригинале
                if random.random() < 0.3 and num_slots > 2:
                    filled_pattern = filled_pattern.replace("{}", word, 1)
                else:
                    filled_pattern = filled_pattern.replace("{}", word, 1)
            else:
                filled_pattern = filled_pattern.replace("{}", "сглыпа", 1)
        
        # Добавляем случайные знаки препинания как у оригинала
        endings = ["", "!", "!!", "...", ".", "!!1", "!!!", "?!"]
        return filled_pattern.capitalize() + random.choice(endings)

    @loader.command()
    async def sglypa(self, message):
        """Сгенерировать сглыпу или управление режимом - .sglypa [on/off]"""
        args = utils.get_args_raw(message)
        chat_id = utils.get_chat_id(message)
        
        if message.text:
            self.add_to_history(chat_id, message.text)

        if not args:
            sglypa_text = self.generate_true_sglypa(chat_id)
            await utils.answer(message, sglypa_text)
            return
            
        if args.lower() == "on":
            if chat_id in self.active_chats:
                await utils.answer(message, self.strings("already_on"))
            else:
                self.active_chats.add(chat_id)
                await utils.answer(message, self.strings("on"))
                
        elif args.lower() == "off":
            if chat_id not in self.active_chats:
                await utils.answer(message, self.strings("already_off"))
            else:
                self.active_chats.discard(chat_id)
                await utils.answer(message, self.strings("off"))
                
        else:
            sglypa_text = self.generate_true_sglypa(chat_id)
            await utils.answer(message, sglypa_text)

    @loader.watcher()
    async def watcher(self, message):
        """Отслеживаем сообщения только в активных чатах"""
        chat_id = utils.get_chat_id(message)
        
        if chat_id not in self.active_chats:
            return
            
        if not message.text or message.out or message.text.startswith('.'):
            return
            
        self.add_to_history(chat_id, message.text)
        
        # Если есть слово "сглыпа" - отвечаем всегда
        if re.search(r'сглыпа', message.text, re.IGNORECASE):
            sglypa_text = self.generate_true_sglypa(chat_id)
            await message.reply(sglypa_text)
            return
            
        # Шанс ответа 40%
        if random.randint(1, 100) <= 40:
            sglypa_text = self.generate_true_sglypa(chat_id)
            await message.reply(sglypa_text)

    async def on_unload(self):
        self.active_chats.clear()
        self.chat_history.clear()